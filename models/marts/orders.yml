models:
  - name: orders
    description: Order overview data mart, offering key details for each order including if it's a customer's first order and a food vs. drink item breakdown. One row per order.
    data_tests:
      - dbt_utils.expression_is_true:
          expression: "orderItemsSubtotal = subtotal"
      - dbt_utils.expression_is_true:
          expression: "orderTotal = subtotal + taxPaid"
    columns:
      - name: orderId
        description: The unique key of the orders mart.
        data_tests:
          - not_null
          - unique
      - name: customerId
        description: The foreign key relating to the customer who placed the order.
        data_tests:
          - relationships:
              to: ref('stgCustomers')
              field: customerId
      - name: orderTotal
        description: The total amount of the order in USD including tax.
      - name: orderedAt
        description: The timestamp the order was placed at.
      - name: orderCost
        description: The sum of supply expenses to fulfill the order.
      - name: isFoodOrder
        description: A boolean indicating if this order included any food items.
      - name: isDrinkOrder
        description: A boolean indicating if this order included any drink items.

unit_tests:
  - name: testOrderItemsComputeToBoolsCorrectly
    description: "Test that the counts of drinks and food orders convert to booleans properly."
    model: orders
    given:
      - input: ref('orderItems')
        rows:
          - {
              orderId: 1,
              orderItemId: 1,
              isDrinkItem: false,
              isFoodItem: true,
            }
          - {
              orderId: 1,
              orderItemId: 2,
              isDrinkItem: true,
              isFoodItem: false,
            }
          - {
              orderId: 2,
              orderItemId: 3,
              isDrinkItem: false,
              isFoodItem: true,
            }
      - input: ref('stgOrders')
        rows:
          - { orderId: 1 }
          - { orderId: 2 }
    expect:
      rows:
        - {
            orderId: 1,
            countFoodItems: 1,
            countDrinkItems: 1,
            isDrinkOrder: true,
            isFoodOrder: true,
          }
        - {
            orderId: 2,
            countFoodItems: 1,
            countDrinkItems: 0,
            isDrinkOrder: false,
            isFoodOrder: true,
          }

semantic_models:
  - name: orders
    defaults:
      agg_time_dimension: orderedAt
    description: |
      Order fact table. This table is at the order grain with one row per order.
    model: ref('orders')
    entities:
      - name: orderId
        type: primary
      - name: location
        type: foreign
        expr: locationId
      - name: customer
        type: foreign
        expr: customerId
    dimensions:
      - name: orderedAt
        expr: orderedAt
        type: time
        type_params:
          time_granularity: day
      - name: orderTotalDim
        type: categorical
        expr: orderTotal
      - name: isFoodOrder
        type: categorical
      - name: isDrinkOrder
        type: categorical
      - name: customerOrderNumber
        type: categorical
    measures:
      - name: orderTotal
        description: The total amount for each order including taxes.
        agg: sum
      - name: orderCount
        expr: 1
        agg: sum
      - name: taxPaid
        description: The total tax paid on each order.
        agg: sum
      - name: orderCost
        description: The cost for each order item. Cost is calculated as a sum of the supply cost for each order item.
        agg: sum

metrics:
  - name: orderTotal
    description: Sum of total order amount. Includes tax + revenue.
    type: simple
    label: Order Total
    type_params:
      measure: orderTotal
  - name: newCustomerOrders
    description: New customer's first order count
    label: New Customers
    type: simple
    type_params:
      measure: orderCount
    filter: |
      {{ Dimension('orderId__customerOrderNumber') }} = 1
  - name: largeOrders
    description: "Count of orders with order total over 20."
    type: simple
    label: Large Orders
    type_params:
      measure: orderCount
    filter: |
      {{ Dimension('orderId__orderTotalDim') }} >= 20
  - name: orders
    description: Count of orders.
    label: Orders
    type: simple
    type_params:
      measure: orderCount
  - name: foodOrders
    description: Count of orders that contain food order items
    label: Food Orders
    type: simple
    type_params:
      measure: orderCount
    filter: |
      {{ Dimension('orderId__isFoodOrder') }} = true
  - name: drinkOrders
    description: Count of orders that contain drink order items
    label: Drink Orders
    type: simple
    type_params:
      measure: orderCount
    filter: |
      {{ Dimension('orderId__isDrinkOrder') }} = true

saved_queries:
  - name: orderMetrics
    query_params:
      metrics:
        - orders
        - newCustomerOrders
        - orderTotal
        - foodOrders
        - drinkOrders
      group_by:
        - TimeDimension('metricTime', 'day')
    exports:
      - name: orderMetrics
        config:
          export_as: table